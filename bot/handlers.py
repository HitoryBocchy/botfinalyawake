import random
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database import load_data, save_user_stats, QUIZ_FILE, CHARACTER_FILE, EMOJI_FILE, STATS_FILE

dp = Dispatcher()

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üàØ –ö–≤–∏–∑ 1 –∏–∑ 4 üíÆ", callback_data="select_text_quiz_difficulty")],
        [InlineKeyboardButton(text="ü¶πüèº‚Äç‚ôÇÔ∏è –ö–≤–∏–∑ —É–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ü•∑üèΩ", callback_data="start_character_quiz")],
        [InlineKeyboardButton(text="üü†üêâ –£–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ Emoji üå∏üâê", callback_data="start_emoji_quiz")],
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üíæ", callback_data="show_stats")]
    ])

def difficulty_menu(quiz_type):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå± –õ–µ–≥–∫–∏–π", callback_data=f"difficulty|easy|{quiz_type}")],
        [InlineKeyboardButton(text="üåø –°—Ä–µ–¥–Ω–∏–π", callback_data=f"difficulty|medium|{quiz_type}")],
        [InlineKeyboardButton(text="üî• –°–ª–æ–∂–Ω—ã–π", callback_data=f"difficulty|hard|{quiz_type}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

@dp.message(Command("start"))
async def start_quiz(message: Message):
    user_id = str(message.from_user.id)
    stats = load_data(STATS_FILE)

    if user_id not in stats:
        stats[user_id] = {"correct": 0, "wrong": 0}
        save_user_stats(stats)

    await message.answer("üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∏–º–µ-–ö–≤–∏–∑!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu())

@dp.callback_query(lambda c: c.data == "select_text_quiz_difficulty")
async def select_text_quiz_difficulty(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("text"))

@dp.callback_query(lambda c: c.data == "start_character_quiz")
async def start_character_quiz(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("image"))

@dp.callback_query(lambda c: c.data == "start_emoji_quiz")
async def start_emoji_quiz(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("emoji"))

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    try:
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    except Exception:
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.callback_query(lambda c: c.data.startswith("difficulty|"))
async def handle_difficulty_selection(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    difficulty, quiz_type = callback.data.split("|")[1:]

    user_stats = load_data(STATS_FILE)
    user_stats.setdefault(user_id, {})["difficulty"] = difficulty
    save_user_stats(user_stats)

    chat_id = callback.message.chat.id
    await callback.message.answer(f"üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: *{difficulty.capitalize()}*!\n–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É...", parse_mode="Markdown")

    await asyncio.sleep(1)
    if quiz_type == "text":
        await send_question(user_id, chat_id)
    elif quiz_type == "image":
        await send_character_question(user_id, chat_id)
    else:
        await send_emoji_question(user_id, chat_id)

# === –û–¢–ü–†–ê–í–ö–ê –í–û–ü–†–û–°–û–í ===

async def send_question(user_id, chat_id):
    data = load_data(QUIZ_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats.get(user_id, {}).get("difficulty", "easy")

    question_list = data.get(difficulty, [])
    if not question_list:
        return

    question = random.choice(question_list)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer|{option}|{question['correct']}")] for option in question["options"]
        ]
    )

    bot_msg = f"‚ùì *{question['question']}*"
    await dp.bot.send_message(chat_id, bot_msg, reply_markup=keyboard, parse_mode="Markdown")

async def send_character_question(user_id, chat_id):
    data = load_data(CHARACTER_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats.get(user_id, {}).get("difficulty", "easy")

    question_list = data.get(difficulty, [])
    if not question_list:
        return

    question = random.choice(question_list)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer|{option}|{question['correct']}")] for option in question["options"]
        ]
    )

    image_path = Path("achievements") / question["image"]
    photo = FSInputFile(image_path)
    await dp.bot.send_photo(chat_id, photo=photo, caption="–£–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=keyboard)

async def send_emoji_question(user_id, chat_id):
    data = load_data(EMOJI_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats.get(user_id, {}).get("difficulty", "easy")

    question_list = data.get(difficulty, [])
    if not question_list:
        return

    question = random.choice(question_list)
    emoji_text = " ".join(question["emoji"])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer|{option}|{question['correct']}")] for option in question["options"]
        ]
    )

    await dp.bot.send_message(chat_id, f"–£–≥–∞–¥–∞–π –∞–Ω–∏–º–µ –ø–æ —ç–º–æ–¥–∑–∏:\n{emoji_text}", reply_markup=keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===

@dp.callback_query(lambda c: c.data.startswith("answer|"))
async def handle_answer(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    answer_data = callback.data.split("|")
    selected_answer = answer_data[1]
    correct_answer = answer_data[2]

    stats = load_data(STATS_FILE)
    stats.setdefault(user_id, {"correct": 0, "wrong": 0})

    if selected_answer == correct_answer:
        stats[user_id]["correct"] += 1
        text = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        stats[user_id]["wrong"] += 1
        text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    save_user_stats(stats)
    await callback.message.answer(text)
    await asyncio.sleep(1)

    difficulty = stats[user_id].get("difficulty", "easy")
    quiz_type = "text"
    if callback.message.photo:
        quiz_type = "image"
    elif "—ç–º–æ–¥–∑–∏" in callback.message.text.lower():
        quiz_type = "emoji"

    if quiz_type == "text":
        await send_question(user_id, callback.message.chat.id)
    elif quiz_type == "image":
        await send_character_question(user_id, callback.message.chat.id)
    else:
        await send_emoji_question(user_id, callback.message.chat.id)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@dp.callback_query(lambda c: c.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    stats = load_data(STATS_FILE)
    user_stats = stats.get(user_id, {"correct": 0, "wrong": 0})

    correct = user_stats.get("correct", 0)
    wrong = user_stats.get("wrong", 0)
    total = correct + wrong
    percent = round((correct / total) * 100, 2) if total else 0

    await callback.message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {percent}%"
    )
