import random
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database import load_data, save_user_stats, QUIZ_FILE, CHARACTER_FILE, EMOJI_FILE, STATS_FILE

dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üàØ –ö–≤–∏–∑ 1 –∏–∑ 4 üíÆ", callback_data="select_text_quiz_difficulty")],
            [InlineKeyboardButton(text="ü¶πüèº‚Äç‚ôÇÔ∏è –ö–≤–∏–∑ —É–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ü•∑üèΩ", callback_data="start_character_quiz")],
            [InlineKeyboardButton(text="üü†üêâ –£–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ Emoji üå∏üâê", callback_data="start_emoji_quiz")],
            [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üíæ", callback_data="show_stats")]
        ]
    )
    return markup


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def difficulty_menu(quiz_type):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üå± –õ–µ–≥–∫–∏–π", callback_data=f"difficulty|easy|{quiz_type}")],
            [InlineKeyboardButton(text="üåø –°—Ä–µ–¥–Ω–∏–π", callback_data=f"difficulty|medium|{quiz_type}")],
            [InlineKeyboardButton(text="üî• –°–ª–æ–∂–Ω—ã–π", callback_data=f"difficulty|hard|{quiz_type}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
    )
    return markup


# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Mark
def escape_markdown_v2(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_quiz(message: Message):
    user_id = str(message.from_user.id)
    stats = load_data(STATS_FILE)

    if user_id not in stats:
        stats[user_id] = {"correct": 0, "wrong": 0}
        save_user_stats(stats)

    await message.answer("üéå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∏–º–µ-–ö–≤–∏–∑!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu())


# –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
@dp.callback_query(lambda c: c.data == "select_text_quiz_difficulty")
async def select_text_quiz_difficulty(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("text"))


# –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–≤–∏–∑–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
@dp.callback_query(lambda c: c.data == "start_character_quiz")
async def start_character_quiz(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("image"))
 
    
# –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–≤–∏–∑–∞ –ø–æ Emoji
@dp.callback_query(lambda c: c.data == "start_emoji_quiz")
async def start_emoji_quiz(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=difficulty_menu("emoji"))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ñ–æ—Ç–æ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.callback_query(lambda c: c.data.startswith("difficulty|"))
async def handle_difficulty_selection(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    difficulty, quiz_type = callback.data.split("|")[1:]

    user_stats = load_data(STATS_FILE)
    user_stats.setdefault(user_id, {})["difficulty"] = difficulty
    save_user_stats(user_stats)

    chat_id = callback.message.chat.id
    await bot.send_message(chat_id, f"üîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: *{difficulty.capitalize()}*!\n–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É...")

    await asyncio.sleep(0.7)

    if quiz_type == "text":                                  
        await send_question(user_id, chat_id)
    elif quiz_type == "image":
        await send_character_question(user_id, chat_id)
    else:
        await send_emoji_question(user_id, chat_id)



# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–≤–∏–∑)
async def send_question(user_id, chat_id):
    quiz_data = load_data(QUIZ_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats[user_id].get("difficulty", "medium")

    filtered_questions = [q for q in quiz_data.get("questions", []) if q["difficulty"] == difficulty]

    if not filtered_questions:
        await bot.send_message(chat_id, "üòï –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    question = random.choice(filtered_questions)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=option, callback_data=f"answer|{option}")]
                         for option in question["options"]]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    user_stats[user_id]["current_question"] = {**question,"quiz_type": "text"}
    save_user_stats(user_stats)

    await bot.send_message(chat_id, f"‚ùì {question['question']}", reply_markup=keyboard)



# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (—É–≥–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
async def send_character_question(user_id, chat_id):
    character_data = load_data(CHARACTER_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats.get(user_id, {}).get("difficulty", "medium")

    filtered_questions = [q for q in character_data.get("questions", []) if q["difficulty"] == difficulty]

    if not filtered_questions:
        await bot.send_message(chat_id, "üòï –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    question = random.choice(filtered_questions)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=option, callback_data=f"answer|{option}")]
                         for option in question["options"]]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    user_stats[user_id]["current_question"] = {**question,"quiz_type": "image"}
    save_user_stats(user_stats)

    photo = FSInputFile(question["image_path"])  
    await bot.send_photo(chat_id, photo, caption="üñº –ö—Ç–æ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂?", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (emoji –∫–≤–∏–∑)
async def send_emoji_question(user_id, chat_id):
    emoji_quiz = load_data(EMOJI_FILE)
    user_stats = load_data(STATS_FILE)
    difficulty = user_stats[user_id].get("difficulty", "medium")

    filtered_questions = [q for q in emoji_quiz.get("questions", []) if q["difficulty"] == difficulty]

    if not filtered_questions:
        await bot.send_message(chat_id, "üòï –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    question = random.choice(filtered_questions)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=option, callback_data=f"answer|{option}")]
                         for option in question["options"]]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    user_stats[user_id]["current_question"] = {**question,"quiz_type": "emoji"}
    save_user_stats(user_stats)

    await bot.send_message(chat_id, f"‚ùì {question['question']}", reply_markup=keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê ===

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤    
@dp.callback_query(lambda c: c.data.startswith("answer|"))
async def handle_answer(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    user_stats = load_data(STATS_FILE)

    if user_id not in user_stats or "current_question" not in user_stats[user_id]:
        await callback.answer("üîπ –ù–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ!", show_alert=True)
        return

    question = user_stats[user_id]["current_question"]
    selected_answer = callback.data.split("|")[1]
    correct_answer = question["answer"]

    if selected_answer == correct_answer:
        response = f"‚úÖ –í–µ—Ä–Ω–æ! {question['explanation']}"
        user_stats[user_id]["correct"] += 1
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}.\n{question['explanation']}"
        user_stats[user_id]["wrong"] += 1

    del user_stats[user_id]["current_question"]
    save_user_stats(user_stats)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–î–ï–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await callback.message.answer(response)

    await asyncio.sleep(0.7)
    quiz_type = question.get("quiz_type", "text")  # fallback –Ω–∞ "text
    if quiz_type == "image":
        await send_character_question(user_id, callback.message.chat.id)
    elif quiz_type == "emoji":
        await send_emoji_question(user_id, callback.message.chat.id)
    else:
        await send_question(user_id, callback.message.chat.id)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(lambda c: c.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    user_stats = load_data(STATS_FILE)
    stats = user_stats.get(user_id, {})

    correct = stats.get("correct", 0)
    wrong = stats.get("wrong", 0)
    total = correct + wrong
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
    )

    if total == 0:
        message_text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –æ—á–∫–∏!"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
        )
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    percentage = int((correct / total) * 100)

    # –ü–æ–¥–±–∏—Ä–∞–µ–º –∞—á–∏–≤–∫—É –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    achievements = {
        10: "achievements/10.png",
        30: "achievements/30.png",
        50: "achievements/50.gif",
        70: "achievements/70.gif",
        90: "achievements/90.png",
        100: "achievements/100.gif"
    }

    ACHIEVEMENT_TEXTS =  {
        10: "–£ —Ç–µ–±—è –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è! –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!",
        30: "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –≠—Ç–æ —É–∂–µ —É—Å–ø–µ—Ö!",
        50: "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞!",
        70: "–í—ã –±–ª–∏–∑–∫–∏ –∫ –≤–µ—Ä—à–∏–Ω–µ !",
        90: "–í–∞—É! –¢—ã –ø–æ—á—Ç–∏ –∞–Ω–∏–º–µ!",
        100: "‚Å¥‚Å∞‚Å¥–¢–ï–ë–ï –ë–û‚Å¥‚Å∞‚Å¥–õ–¨–®–ï –ù–ï  –ù–£‚Å¥‚Å∞‚Å¥–ñ–ù–û –ê–ù–ò–ú–ï –ß–¢–û–ë–´ –°–ú–û–¢‚Å¥‚Å∞‚Å¥–†–ï–¢–¨ –ê–ù–ò–ú‚Å¥‚Å∞‚Å¥–ï",
    }

    caption_text =""
    for percent in sorted(ACHIEVEMENT_TEXTS.keys(), reverse=True):
        if percentage >= percent:
            caption_text = ACHIEVEMENT_TEXTS[percent]
            break
    hidden_text = f" || –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ : {percentage}%||"
    
    # üëá –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
    caption_text = escape_markdown_v2(caption_text)
    hidden_text = escape_markdown_v2(hidden_text)
    caption_full = f"{caption_text}\n\n{hidden_text}"

    selected_image = None
    for percent in sorted(achievements.keys()):
        if percentage >= percent:
            selected_image = achievements[percent]

    if selected_image:
        file = FSInputFile(selected_image)
        ext = Path(selected_image).suffix.lower()

        if ext == ".gif":
            await callback.message.answer_animation(
                animation=file,
                caption=caption_full,
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
        elif ext in [".jpg", ".jpeg", ".png"]:
            await callback.message.answer_photo(
                photo=file,
                caption=caption_full,
                reply_markup=keyboard,
                parse_mode="MarkdownV2"
            )
        else:
            fallback_text = f"{caption_text}\n\n{escape_markdown_v2('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç')}"
            await callback.message.answer(text=fallback_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        message_text = escape_markdown_v2("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –æ—á–∫–∏!")
        await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="MarkdownV2")
